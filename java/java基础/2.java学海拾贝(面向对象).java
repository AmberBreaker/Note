1.	Java 继承

2.	Java 重写(Override)与重载(Overload)
	1.	方法的重写规则：
		1.	重写方法不能抛出新的检查异常或者比被重写方法申明更加宽泛的异常。
		2.	构造方法不能被重写。
		3.	如果不能继承一个方法，则不能重写这个方法。
		4.	访问权限不能比父类中被重写的方法的访问权限更低。
		5.	声明为 final 的方法不能被重写。
		6.	声明为 static 的方法不能被重写，但是能够被再次声明。
		7.	子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法。
			子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法。
		8.	构造方法不能被重写。
	2.	Super关键字的使用：
		1.	super.父类方法()
			调用父类的方法，这样可以屏蔽子类的方法。如：
			class Animal{
				public void move(){
					System.out.println("动物可以移动");
				}
			}
			class Dog extends Animal{
				public void move(){
					super.move(); // 应用super类的方法，调用父类同名方法。
					System.out.println("狗可以跑和走");
				}
			}
		2.	重载(Overload)
			1.	被重载的方法必须改变参数列表(参数个数或类型不一样)；
			2.	被重载的方法可以改变返回类型；
			3.	被重载的方法可以改变访问修饰符；
			4.	被重载的方法可以声明新的或更广的检查异常；
			5.	方法能够在同一个类中或者在一个子类中被重载。
			6.	无法以返回值类型作为重载函数的区分标准。

3.	Java 多态
	1.	多态就是同一个接口，使用不同的实例而执行不同操作
	2.	多态存在的三个必要条件
		1.继承，2.重写，3.父类引用指向子类对象
	3.	当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误；
		如果有，再去调用子类的同名方法。

4.	Java 抽象类与抽象方法（abstract）
	1.	在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，
		如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。
	2.	抽象类除了不能实例化对象之外，类的其它功能依然存在，成员变量、成员方法和构造方法的访问方式和普通类一样。
	3.	由于抽象类不能实例化对象，所以抽象类必须被继承，才能被使用。也是因为这个原因，
		通常在设计阶段决定要不要设计抽象类。
	4.	如果一个类包含抽象方法，那么该类必须是抽象类。
		任何子类必须重写父类的抽象方法，或者声明自身为抽象类。

5.	Java 封装
	实现Java封装的步骤：
	1.	修改属性的可见性来限制对属性的访问（一般限制为private）
	2.	对每个值属性提供对外的公共方法访问，也就是创建一对赋取值方法，用于对私有属性的访问。
	例：
		public class Person{
			private String name;
			private int age;

			public int getAge(){
			  return age;
			}

			public String getName(){
			  return name;
			}

			public void setAge(int age){
			  this.age = age;
			}

			public void setName(String name){
			  this.name = name;
			}
		}

6.	Java 接口
	1.	除非实现接口的类是抽象类，否则该类要定义接口中的所有方法
		（反过来就是说抽象类可以不定义接口中的抽象方法）
	2.	接口类型可用来声明一个变量，他们可以成为一个空指针，或是被绑定在一个以此接口实现的对象。
	3.	接口特性
		1.	接口中每一个方法也是隐式抽象的,接口中的方法会被隐式的指定为 public abstract。
			（只能是 public abstract，其他修饰符都会报错）
		2.	接口中可以含有变量，但是接口中的变量会被隐式的指定为 public static final 变量。
			（并且只能是 public，用 private 修饰会报编译错误）
		3.	接口中可以写自己的方法，只要该方法上面有没 @Override 注解
	4.	抽象类和接口的区别
		1.	抽象类中的方法可以有方法体，就是能实现方法的具体功能，但是接口中的方法不行。
		2.	抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 public static final 类型的。
		3.	一个类只能继承一个抽象类，而一个类却可以实现多个接口。
	5.	类在实现接口方法时，不能抛出强制性异常，只能在接口中，或者继承接口的抽象类中抛出该强制性异常。
	6.	在实现接口的时候，需要注意一些规则：
		1.	一个类只能继承一个类，但可以同时实现多个接口。
		2.	一个接口能继承另一个接口，这和类之间的继承比较相似。
			实现子接口的时候，需要同时实现父接口中所有的抽象方法。
		3.	在Java中，类的多继承是不合法，但接口允许多继承。
			extends关键字只需要使用一次，在其后跟着继承接口，用 ，隔开
	7.	标记接口
		1.	标记接口是没有任何方法和属性的接口。它仅仅表明它的类属于一个特定的类型，供其他代码来测试允许做一些事情。
		2.	标记接口作用：简单形象的说就是给某个对象打个标（盖个戳），使对象拥有某个或某些特权。
	8.	标记接口的主要的两个目的：
		1.	建立一个公共的父接口。
		2.	向一个类添加数据类型。

7.	Java 包(package)
	1.	如同文件夹一样，包也采用了树形目录的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，
		当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。因此，包可以避免名字冲突。