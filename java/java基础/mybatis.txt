1.	#{}和${}的区别是什么？
	a)、#{}和${}取值方式是不同的（OGNL）。
	b)、#{}是预编译的方式，${}是动态拼接字符串的方式。
	c)、#{}和${}传的参数是简单类型的话，它们取之的参数名称是有区别的，也就是#{}和${}中的名称。
	d)、${}存在SQL注入问题。
	e)、解析顺序不同（#{}和${}谁先解析的问题）。
		select * from user where username like '%${name}%' and age=#{age};
		select * from user where age=#{age} and username like '%${name}%';
	f)、#{}对于参数的处理，是需要根据类型来处理，比如字符串类型，处理之后会加上单引号，而${}不管类型，内容都是原样输出。

2.	既然${}存在SQL注入问题，那么在什么场景下才能使用它。
	from
		${}存在很大风险，不能使用；同时，#{}也不可以使用。
	where
		存在SQL注入，略。
	group by ${columnName}
		能且只能使用${}
	order by ${columnName}
		能且只能使用${}

3.	既然mybatis的SqlSession要求只能传入一个参数，那么以下代码如何解释。
	int updateByExample(@Param("record") User record, @Param("example") UserExample example);
	封装成Map对象，@Param注解中的值为key，@Param注解的参数为value
	SqlSession.update(statementId, param);


课程主题：手写mybatis框架核心流程
课程目标：
	1.	了解mybatis框架的设计过程（1.0版本、2.0版本、3.0版本）
	2.	手写mybatis1.0版本，目前是从JDBC原生代码过渡到properties配置文件的阶段
	3.	手写mybatis2.0版本，目前是从properties配置文件过渡到xml配置文件的阶段，并且完成复杂的解析，
		只是这个过程是通过面向过程的方式实现的。
	4.	手写mybatis3.0版本，目的是从面向过程转化为面向对象的阶段。
	5.	手写mybatis4.0版本，目的是使用设计模式来优化。




课程内容：
1.	手写mybatis1.0版本：从原生JDBC代码开始演变。（核心就是将JDBC代码去完成了代码和配置的分离）
2.	手写mybatis2.0版本。（配置和代码分离，配置是XML文件，代码是使用面向过程去编写）
	a)	加载XML配置文件（直接参看mybatis配置方式）
		*【解析全局配置文件】（配置的是全应用范围内一次性的配置信息）
		  ** 数据源的配置信息（driver、url、username、password） -- 最终解析成DataSource对象，并封装到Configuration对象中。
		  ** 映射文件到信息
		*【解析映射文件】：【SqlSource】和【SqlNode】都是为了存储数据，并且对存储了的数据对外提供了一些操作。
		  ** 解析select标签（statement标签）-- 封装【MappedStatement】对象，将id、parameterType，resultType，statementType都封装进去
		  ** 解析select标签中的SQL脚本信息（script）-- 封装成【SqlSource】对象，而SqlSource对象中封装了【SqlNode】
	b)	JDBC执行代码（如果需要配置文件的信息，则需要从【Configuration】对象中获取）
		*【获取链接】
		  ** 使用【数据源对象】去优化连接的创建（DBCP，需要添加第三方的依赖，并且将信息配置到XML文件中）
		  ** 需要通过【Configuration】对象，去获取解析出来的【DataSource】对象信息。
		*【获取SQL】
		  ** 拼接SQL语句：将所有的【SqlNode】中保存的信息都拼接到【StringBuffer对象】中，在拼接的过程中会将${}解决掉。
			【SqlSource】 -> 【SqlNode集合】（SqlNode】中既包含【SqlNode】，也会包含【SqlNode集合】）。
		  ** 解析SQL语句：将【完整的SQL语句】中的#{}处理掉。在解析之后，会形成两部分数据：【最终的SQL语句】、【#{}中的属性名称】。并将信息封装到【staticSqlSource】
		  ** 通过【SqlSource】获取 【BoundSql】(jdbc可执行的SQL语句, 参数信息集合);
		  ** 通过【BoundSql】获取里面存储的SQL语句。（注：BoundSql其实就将【最终的SQL语句】和【该SQL语句中解析出来的SQL信息】绑定到一起，方便后面一起使用）
		  	 例：select * from users where id = #{id} and name = #{name}，则BoundSql对象中存储了：
		  	 	BoundSql {
		  	 		select * from users where id = ? and name = ?
		  	 		List<ParameterMapping> : id 和 name 这两个【参数名称】，以及对应的【参数类型】。
		  	 	}
		*【获取statement】
		  ** 通过【MappedStatement】对象，获取【statementType】对象
		*【设置参数】
		  ** 通过【MappedStatement】对象获取入参类型（简单类型、引用类型）
		  ** 如果是【引用类型】，则需要SQL解析过程中产生的参数信息（ParameterMapping集合信息）。我要根据这个参数信息，去入参对象获取指定属性值。
		  ** 调用statement.setString(1, "zhangsan");
		*【执行Statement】
		*【处理结果】
		  ** 通过【MappedStatement对象】输出映射类型
		  ** 通过【反射】给输出映射类型对应的对象，去设置属性值（通过ResultSet结果集中的每一列来）
